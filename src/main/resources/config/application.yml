spring:
  datasource:
    url: ~
    username: np-spring-mvc-demo
    password: ~
  application:
    name: np-spring-mvc-demo
  jackson:
    default-property-inclusion: NON_ABSENT
    deserialization:
      accept-single-value-as-array: true

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false
    hibernate:
      use-new-id-generator-mappings: false
      ddl-auto: validate

  security:
    strategy: MODE_INHERITABLETHREADLOCAL
    oauth2:
      client:
        registration:
          google:
            client-id: ~
            client-secret: ~

  mail:
    port: ~
    username: ~
    password: ~
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  
  kafka:
    bootstrap-servers: ~
    security:
      protocol: ~
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # https://stackoverflow.com/questions/60570238/is-a-write-to-a-kafka-topic-only-successful-if-write-on-each-partitions-replica
      acks: all
      retries: 2147483647
      properties:
        max.block.ms: 9223372036854775807
        max.in.flight.requests.per.connection: 1
    consumer:
      group-id: ${spring.application.name}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: false
    listener:
      ack-mode: manual_immediate

management:
  metrics:
    tags:
      application: ${spring.application.name}
  endpoints:
    jmx.exposure.exclude: "*"
    web.exposure.include: health, info, beans, metrics, threaddump, prometheus

my:
  homepage: ~
  oauth2-authentication-success-url: ~
jws:
  # a UUID generated independently
  id: ~
  # Generated using https://www.javainuse.com/rsagenerator (Key size 2048)
  public-key: ~
  private-key: ~
  jwe:
    # a UUID generated independently
    id: ~
    # An aes-128-cbc key generated at https://asecuritysite.com/encryption/keygen (take the "key" field)
    key: ~
